

# --- 1. Add Final Status (Done, Cancelled, or In Progress) ---
df['Final_Status'] = df.apply(
    lambda row: 'Done' if pd.notna(row['Done']) else (
        'Cancelled' if pd.notna(row['Cancelled']) else 'In Progress'
    ), axis=1
)

# --- 2. Filter to Completed Tasks (Done or Cancelled) ---
completed = df[df['Final_Status'].isin(['Done', 'Cancelled'])].copy()

# --- 3. Create Assignee Summary Table ---
summary = completed.groupby('Assignee').agg(
    Tasks=('Issue key', 'count'),
    StoryPoints=('Story Points', 'sum')
).reset_index()

summary['AvgSPPerTask'] = (summary['StoryPoints'] / summary['Tasks']).round(2)

# --- 4. Plot Visual ---
fig, ax = plt.subplots(figsize=(10, 6))
x = range(len(summary))
bar_width = 0.3

# Bar groups
ax.bar([i - bar_width for i in x], summary['Tasks'], width=bar_width, label='Tasks Completed', color='steelblue')
ax.bar(x, summary['StoryPoints'], width=bar_width, label='Story Points', color='seagreen')
ax.bar([i + bar_width for i in x], summary['AvgSPPerTask'], width=bar_width, label='Avg SP / Task', color='orange')

# Labels and style
ax.set_xticks(x)
ax.set_xticklabels(summary['Assignee'], rotation=45, ha='right', fontsize=10)
ax.set_ylabel('Metric Value')
ax.set_title('Assignee Task Completion Summary', fontsize=14, fontweight='bold')
ax.legend()
ax.grid(axis='y', linestyle='--', alpha=0.5)

plt.tight_layout()
plt.show()
