from collections import defaultdict

transition_duration_dict = defaultdict(list)

# Loop through each task (row)
for _, row in df_tracked.iterrows():
    # Get all valid timestamps for this task
    stages = [(col, row[col]) for col in timestamp_columns if pd.notna(row[col])]
    stages = sorted(stages, key=lambda x: x[1])  # Sort by actual time

    # Calculate only transitions
    for i in range(len(stages) - 1):
        from_stage, start_time = stages[i]
        to_stage, end_time = stages[i + 1]

        duration = (end_time - start_time).total_seconds() / 86400  # Convert seconds to days
        if duration >= 0:
            transition_name = f"{from_stage} to {to_stage}"
            transition_duration_dict[transition_name].append(round(duration, 2))

for transition, durations in transition_duration_dict.items():
    df_tracked[transition] = pd.Series(durations)
